generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Usuario (Proveedor que usa la plataforma)
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  nif         String?  @unique
  address     String?
  postalCode  String?
  phone       String?
  userType    UserType @default(COMPANY) // Empresa o Cliente
  role        Role     @default(PROVIDER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  company            Company?
  invoicesRequested  Invoice[] @relation("InvoiceRequester")  // Facturas solicitadas como cliente
  invoicesApproved   Invoice[] @relation("InvoiceApprover")   // Facturas aprobadas como empresa
}

enum UserType {
  COMPANY   // Usuario que factura (proveedores)
  CLIENT    // Usuario que recibe facturas
}

enum Role {
  PROVIDER  // Proveedor (tu copistería, otros negocios)
  ADMIN     // Administrador de la plataforma
}

// Empresa/Negocio del proveedor
model Company {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name       String
  nif        String   @unique
  address    String
  postalCode String
  email      String
  phone      String
  logo       String?  // URL del logo
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  clients   Client[]
  invoices  Invoice[]
  products  Product[]
}

// Clientes (registros creados al solicitar factura)
model Client {
  id         String   @id @default(uuid())
  userId     String?  // Usuario vinculado si es un usuario registrado
  companyId  String   // Empresa a la que solicita facturas
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  name       String
  nif        String
  address    String
  postalCode String
  email      String
  phone      String?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones
  invoices  Invoice[]

  @@unique([companyId, nif]) // Un NIF único por empresa
  @@index([userId])
}

// Solicitudes de Factura
model Invoice {
  id            String   @id @default(uuid())
  number        String?  // 2025-001 (generado al aprobar)
  
  // Cliente que solicita la factura
  requesterId   String   // Usuario cliente que hace la solicitud
  requester     User     @relation("InvoiceRequester", fields: [requesterId], references: [id])
  clientId      String
  client        Client   @relation(fields: [clientId], references: [id])
  
  // Empresa que debe aprobar y facturar
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  approverId    String?  // Usuario empresa que aprueba
  approver      User?    @relation("InvoiceApprover", fields: [approverId], references: [id])
  
  date          DateTime @default(now())
  approvedAt    DateTime? // Fecha de aprobación
  generatedAt   DateTime? // Fecha de generación del PDF
  
  // Datos del ticket original (para validación de unicidad)
  ticketDate    DateTime?  // Fecha del ticket escaneado
  ticketAmount  Float?     // Importe del ticket
  ticketHash    String?    @unique // Hash de fecha+importe para evitar duplicados
  ticketImageUrl String?   // URL de la imagen del ticket
  ocrData       Json?      // Datos completos extraídos por OCR
  
  // Conceptos y montos
  description   String?
  baseAmount    Float    // Base imponible
  taxRate       Float    @default(21.0) // IVA por defecto 21%
  taxAmount     Float    // Monto de IVA
  totalAmount   Float    // Total con IVA
  
  // Estado del flujo
  status        InvoiceStatus @default(PENDING)
  rejectionReason String?  // Razón de rechazo si aplica
  
  // Archivos
  pdfUrl        String?  // URL del PDF generado
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  items         InvoiceItem[]

  @@unique([companyId, number]) // Número único por empresa
  @@unique([companyId, ticketHash]) // Un ticket único por empresa
  @@index([companyId, status])
  @@index([requesterId, status])
  @@index([clientId])
}

enum InvoiceStatus {
  PENDING   // Solicitud pendiente de aprobación
  APPROVED  // Aprobada por la empresa
  REJECTED  // Rechazada por la empresa
  GENERATED // PDF generado y enviado
  CANCELLED // Cancelada
}

// Items/Líneas de factura
model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  
  description String
  quantity    Float    @default(1.0)
  unitPrice   Float
  discount    Float    @default(0.0)
  totalPrice  Float    // quantity * unitPrice * (1 - discount/100)
  
  createdAt   DateTime @default(now())
}

// Productos/Servicios del proveedor
model Product {
  id          String   @id @default(uuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  name        String
  description String?
  price       Float
  taxRate     Float    @default(21.0)
  active      Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  invoiceItems InvoiceItem[]

  @@index([companyId, active])
}
